#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int M, N, K, Ans = 0, Size = 0;
int Map[100][100] = { 0, };
int Visited[100][100] = { 0, };
int dx[4] = { -1, 1, 0, 0 };
int dy[4] = { 0, 0, -1, 1 };

void Input() {
	cin >> M >> N >> K;
	int lx, ly, rx, ry;
	for (int i = 0; i < K; i++) {
		cin >> lx >> ly >> rx >> ry;
		for (int r =  M - ry; r < M - ly; r++) {
			for (int c = lx; c < rx; c++) {
				Map[r][c] = 1;
			}
		}
	}
}

void dfs(int r, int c) {
	Visited[r][c] = 1;
	Size++;

	for (int i = 0; i < 4; i++) {
		if (r + dx[i] >= 0 && r + dx[i] < M && c + dy[i] >= 0 && c + dy[i] < N) {
			if (Map[r + dx[i]][c + dy[i]] == 0 && Visited[r + dx[i]][c + dy[i]] == 0) {
				dfs(r + dx[i], c + dy[i]);
			}
		}
	}
}

void sol() {
	vector<int> s;

	for (int i = 0; i < M; i++) {
		for (int j = 0; j < N; j++) {
			if (Map[i][j] == 0 && Visited[i][j] == 0) {
				Ans++;
				Size = 0;
				dfs(i, j);
				s.push_back(Size);
			}
		}
	}

	sort(s.begin(), s.end());

	cout << Ans << endl;

	for (int i = 0; i < Ans; i++) {
		cout << s[i] << " ";
	}
}

int main() {
	Input();
	sol();
	return 0;
}
