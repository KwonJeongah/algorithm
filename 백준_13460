#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

using namespace std;

int N, M, ANS = 100;
char MAP[10][10] = { '-', };

int dx[] = { 0, 0, -1, 1 };
int dy[] = { 1, -1, 0, 0 };

pair<int, int> R, B;

int MIN(int a, int b) {
	if (a < b) return a;
	return b;
}

void Input() {
	cin >> N >> M;

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin >> MAP[i][j];
			if (MAP[i][j] == 'R') {
				R.first = i; R.second = j; MAP[i][j] = '.';
			}
			else if (MAP[i][j] == 'B') {
				B.first = i; B.second = j; MAP[i][j] = '.';
			}
		}
	}
}

int Move_Dist(int x, int y, int xx, int yy) {
	return abs(x - xx) + abs(y - yy);
}

int Inverse_Dir(int CD) {
	if (CD == 0) return 1;
	else if (CD == 1) return 0;
	else if (CD == 2) return 3;
	else if (CD == 3) return 2;
	else return -1;
}

void Move(int rx, int ry, int bx, int by, int n, int dir) {
	if (n > 10) return;
	else if (rx == -1) {
		if (bx != -1) {
			if (ANS > n) ANS = n;
		}
		return;
	}
	else if (rx != -1 && bx == -1) return;

	for (int d = 0; d < 4; d++) {
		int RR = rx, RC = ry, BR = bx, BC = by;

		if (d != dir && d != Inverse_Dir(dir)) {
			while (MAP[RR+dx[d]][RC+dy[d]] == '.' || MAP[RR + dx[d]][RC + dy[d]] == 'O') {
				RR += dx[d];
				RC += dy[d];
				if (MAP[RR][RC] == 'O') { RR = -1; RC = -1; break; }
			}
			while (MAP[BR+dx[d]][BC+dy[d]] == '.' || MAP[BR + dx[d]][BC + dy[d]] == 'O') {
				BR += dx[d];
				BC += dy[d];
				if (MAP[BR][BC] == 'O') { BR = -1; BC = -1; break; }
			}
			if (RR != -1 && BR != -1) {
				if (RR == BR && RC == BC) {
					if (Move_Dist(rx, ry, RR, RC) > Move_Dist(bx, by, BR, BC)) {
						RR -= dx[d]; RC -= dy[d];
					}
					else {
						BR -= dx[d]; BC -= dy[d];
					}
				}
			}
			Move(RR, RC, BR, BC, n + 1, d);
		}

	}
}

int main() {
	Input();
	Move(R.first, R.second, B.first, B.second, 0, -1);
	if (ANS == 100) cout << -1;
	else cout << ANS;
	system("pause");
	return 0;
}
