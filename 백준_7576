#include <iostream>
#include <queue>
using namespace std;

int M, N, Raw = 0;
int Box[1000][1000];
int dx[4] = { -1, 1, 0, 0 };
int dy[4] = { 0, 0, -1, 1 };
queue<pair<int, int>> Ripe;

void bfs(int day) {
	int n = Ripe.size();
	while (n) {
		int r = Ripe.front().first;
		int c = Ripe.front().second;
		for (int i = 0; i < 4; i++) {
			if (r + dx[i] >= 0 && r + dx[i] < N && c + dy[i] >= 0 && c + dy[i] < M) {
				if (Box[r + dx[i]][c + dy[i]] == 0) {
					Ripe.push(make_pair(r + dx[i], c + dy[i]));
					Box[r + dx[i]][c + dy[i]] = 1;
					Raw--;
				}
			}
		}
		Ripe.pop();
		n--;
	}

	if (Ripe.empty()) {
		if (Raw == 0) cout << day;
		else cout << -1;
	}
	else {
		bfs(day + 1);
	}
}

void Input() {
	cin >> M >> N;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin >> Box[i][j];
			if (Box[i][j] == 1) {
				Ripe.push(make_pair(i, j));
			}
			else if (Box[i][j] == 0) Raw++;
		}
	}
}

int main() {
	Input();

	if (Raw == 0) cout << 0;
	else {
		bfs(0);
	}
	system("pause");
	return 0;
}
