#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

vector<vector<int>> MAP(8, vector<int>(8, 0));
int ROW[4] = { -1, 1, 0, 0 };
int COL[4] = { 0, 0, -1, 1 };
int N, M;
int MAX = -1;
vector<pair<int, int>> virus;
vector<pair<int, int>> sRegion;

int diffusion() {
	int s = 0;
	vector<pair<int, int>> V = virus;
	vector<vector<int>> dMAP = MAP;

	for (int i = 0; i < (int)V.size(); i++) {		
		for (int j = 0; j < 4; j++) {
			int r = V[i].first;
			int c = V[i].second;

			while (r + ROW[j] >= 0 && r + ROW[j] < N && c + COL[j] >= 0 && c + COL[j] < M) {
				r = r + ROW[j]; c = c + COL[j];
				if (dMAP[r][c] == 0) {
					dMAP[r][c] = 2;
					if (find(V.begin(), V.end(), make_pair(r, c)) == V.end()) V.push_back(make_pair(r, c));
				}
				else break;
			}
		}
	}

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (dMAP[i][j] == 0) s++;
		}
	}
	return s;
}

void dfs(int n) {
	if (n == 3) {
		int safe = diffusion();
		if (MAX < safe) MAX = safe;
		return;
	}


	for (int i = 0; i < (int)sRegion.size(); i++) {
		if (MAP[sRegion[i].first][sRegion[i].second] == 0) {
			MAP[sRegion[i].first][sRegion[i].second] = 1;
			dfs(n + 1);
			MAP[sRegion[i].first][sRegion[i].second] = 0;
		}		
	}
}

int main() {
	cin >> N >> M;

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin >> MAP[i][j];
			if (MAP[i][j] == 2) {
				virus.push_back(make_pair(i, j));
			}
			else if (MAP[i][j] == 0) {
				sRegion.push_back(make_pair(i, j));
			}
		}
	}

	dfs(0);

	cout << MAX;
	return 0;
}
